nao_moveit_config
====================

This is a MoveIt! config package generated by the MoveIt! wizard.
It requires a NAO model which you can get from here:

https://github.com/ros-nao/nao_robot/tree/master/nao_description
or from the binary package : ros-indigo-nao-description

The moveit package must be run on a remote computer and not directly on your robot.

URDF and Textures used
======================

This moveit package is based on a textured nao: https://github.com/ros-naoqi/nao_meshes

The urdf used for the generation of the configuration files is at: https://github.com/ros-naoqi/nao_robot

1. Compile the packages
=======================
nao_moveit_config package doesn't need any compilation so running rospack profile should be enough

For the dcm and gazebo packages you need to compile the C++ nodes.  In order to compile nao_dcm packages, you need to set the environment variable AL_DIR to the path to naoqiSDK-c++ on your computer.

Then you can run the usual 

.. code-block:: bash

    catkin_make

And your ready to play with your nao

2. Run MoveIt
=============

Without robot
-------------
You can run this moveit package either unconnected to any robot or attached to a robot (real or simulated):
For a standalone execution :

.. code-block:: bash

    roslaunch nao_moveit_config demo.launch

On a real nao
-------------
To launch it on a real nao you need:
   - nao_dcm (https://github.com/ros-aldebaran/nao_dcm_robot)
   - nao_control (https://github.com/ros-aldebaran/nao_virtual)

First set NAO_IP environment variable to your robot PI address

Modify the bringup configuration file : nao_dcm_bringup/config/nao_dcm.yaml 

Set the rosparam "RobotIP" to your Nao's IP address

.. code-block:: bash

    roslaunch nao_dcm_bringup nao_dcm_H25_bringup_remote.launch
    
Wait until nao_dcm_bringup is ready then run:

.. code-block:: bash

    roslaunch nao_moveit_config moveit_planner.launch


On a simulated nao (in gazebo)
------------------------------
To launch it on a gazebo simulated nao you need : 
   - nao_dcm (https://github.com/ros-aldebaran/nao_dcm_robot)
   - nao_control (https://github.com/ros-aldebaran/nao_virtual)
   - nao_gazebo_plugin (https://github.com/ros-aldebaran/nao_virtual)

.. code-block:: bash

    roslaunch nao_dcm_gazebo nao_dcm_gazebo_H25.launch
    
Wait until nao_gazebo is ready then click on the pla button in gazebo.

Finally run:

.. code-block:: bash

    roslaunch nao_moveit_config moveit_planner.launch

This is based on the work of Konstantinos Chatzilygeroudis: https://github.com/costashatz/nao_dcm.

3 Use Moveit:
=============
RVIZ has been open: you can see that a MotionPlanning plugin has been launched.
First check the box "Allow approximate IK Solutions" on the bottom of the left column.
Then click on the Planning tab.

Select which part of the robot you want to move:
In the plugin list on the upper part of the left column, you can select a group under MotionPlanning/Planning Request/Planning Group 


Now you can define your motion by drag and dropping the interactive markers.
You can compute a trajectory by clicking the 'planning' button 
Once the motion is satisfying you can try it on your real robot using 'execute' or 'plan and execute'.

NOTE: The start state is not updated automatically, you have to go to 'Select Start State' select 'Current' and click 'Update'.

 
TODO : 
------
Create our own nao_driver/nao_bringup to use moveit with ALMotion

